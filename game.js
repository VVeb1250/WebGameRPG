const scene = document.getElementById("scene");
const menu = document.getElementById("menu");
const statusBox = document.getElementById("statusBox");

const logBox = document.getElementById("logBox");
const logSound = document.getElementById("log-sound");

let activeSideQuest = null;
let sideQuestStep = 0;
let sideQuests = {};
let activeSideQuests = []; // ‡πÄ‡∏Å‡πá‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå

const questLog = document.getElementById("quest-log");

let player = {};
let enemies = [];
let events = [];

async function loadData() {
  const [eventRes, monsterRes, playerRes, sideRes] = await Promise.all([
    fetch("data/events.json"),
    fetch("data/monsters.json"),
    fetch("data/player.json"),
    fetch("data/sidequests.json")
  ]);

  events = await eventRes.json();
  enemies = await monsterRes.json();
  player = await playerRes.json();
  sideQuests = await sideRes.json();
} 

let currentEnemy = null;

function startBattle() {
  currentEnemy = JSON.parse(JSON.stringify(randomEnemy())); // copy
  renderScene();
  renderMenu();
}

function randomEnemy() {
  return enemies[Math.floor(Math.random() * enemies.length)];
}

function renderScene() {
  scene.innerHTML = `${player.emoji} ‚öîÔ∏è ${currentEnemy.emoji}`;
  statusBox.innerHTML = `
    <p>${player.name} ‚ù§Ô∏è ${player.hp} / ${player.maxHp}</p>
    <p>${currentEnemy.name} ‚ù§Ô∏è ${currentEnemy.hp}</p>
  `;
}

function renderMenu() {
  menu.innerHTML = `
    <button class="button" onclick="attack()">üó° ‡πÇ‡∏à‡∏°‡∏ï‡∏µ</button>
    <button class="button" onclick="defend()">üõ° ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô</button>
  `;
}

function attack() {
  const dmg = Math.floor(Math.random() * player.attack);
  currentEnemy.hp -= dmg;
  log(`‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏à‡∏°‡∏ï‡∏µ ${currentEnemy.name} ‡πÑ‡∏î‡πâ ${dmg} ‡∏î‡∏≤‡πÄ‡∏°‡∏à`);

  if (currentEnemy.hp <= 0) {
    log(`${currentEnemy.name} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏≤‡∏ö! üéâ`);
    menu.innerHTML = `<button class="button" onclick="nextEvent()">‚ñ∂ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠</button>`;
    return;
  }

  enemyTurn();
}

function defend() {
  log(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏±‡∏ö ‡∏•‡∏î‡∏î‡∏≤‡πÄ‡∏°‡∏à‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏ó‡∏¥‡∏£‡πå‡∏ô‡∏ô‡∏µ‡πâ`);
  enemyTurn(true);
}

function enemyTurn(playerDefending = false) {
  setTimeout(() => {
    let dmg = Math.floor(Math.random() * currentEnemy.attack);
    if (playerDefending) dmg = Math.floor(dmg / 2);

    player.hp -= dmg;
    log(`${currentEnemy.name} ‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡∏Ñ‡∏∏‡∏ì ‡πÑ‡∏î‡πâ ${dmg} ‡∏î‡∏≤‡πÄ‡∏°‡∏à`);

    if (player.hp <= 0) {
      log(`‡∏Ñ‡∏∏‡∏ì‡∏û‡πà‡∏≤‡∏¢‡πÅ‡∏û‡πâ... üíÄ`);
      menu.innerHTML = `<button class="button" onclick="restart()">üîÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà</button>`;
    } else {
      renderScene();
    }
  }, 800);
}

function nextEvent() {
    const event = events[Math.floor(Math.random() * events.length)];
    scene.innerHTML = `${event.emoji}`;
    statusBox.innerHTML = `<p>${event.text}</p>`;
    menu.innerHTML = "";
  
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (event.choices) {
      event.choices.forEach(choice => {
        const btn = document.createElement("button");
        btn.className = "button";
        btn.textContent = choice.text;
        btn.onclick = () => handleEffect(choice.effect);
        menu.appendChild(btn);
      });
    } else {
      handleEffect(event.effect);
    }
  }

function handleEffect(effect) {
    if (effect?.startsWith("sidequest-")) {
    const questName = effect.replace("sidequest-", "");
    startSideQuest(questName);
    return;
    }

    switch (effect) {
    case "boost": player.attack += 5; log("‡∏û‡∏•‡∏±‡∏á‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô! üí™ (+5)"); break;
    case "trap":  player.hp -= 10; log("‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏ô‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å! -10 HP"); break;
    case "loot":  log("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ Potion! üéÅ"); break;
    case "fight": log("‡∏®‡∏±‡∏ï‡∏£‡∏π‡πÇ‡∏ú‡∏•‡πà‡∏°‡∏≤! ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏π‡πâ"); setTimeout(startBattle, 1000); return;
    case "reward": log("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö 50 Gold ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á! üèÜ"); break;
    case "none":
    default:
        log("‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ...");
        break;
    }

    if (effect !== "fight") {
    menu.innerHTML = `<button class="button" onclick="nextEvent()">‚ñ∂ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠</button>`;
    }
}

function updateQuestLog() {
    const questBox = document.getElementById("quest-log-content");
    if (!questBox) return;
  
    if (activeSideQuests.length === 0) {
      questBox.innerHTML = "- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå -";
      return;
    }
  
    questBox.innerHTML = activeSideQuests.map(q => {
      const step = sideQuests[q.name][q.step];
      return `<strong>${q.name}</strong><br>${step.text}`;
    }).join("<hr>");
  }
function hasQuest(name) {
    return activeSideQuests.some(q => q.name === name);
  }
function clearQuest() {
    activeSideQuest = null;
    sideQuestStep = 0;
    updateQuestLog();
  }
function removeQuest(name) {
    activeSideQuests = activeSideQuests.filter(q => q.name !== name);
    updateQuestLog();
  }

async function loadSideQuests() {
    const res = await fetch("data/sidequests.json");
    const sideQuests = await res.json();
    return sideQuests;
  }
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå
function startSideQuest(name) {
    if (!sideQuests[name]) {
      console.warn(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå‡∏ä‡∏∑‡πà‡∏≠ ${name}`);
      return;
    }
  
    const existing = activeSideQuests.find(q => q.name === name);
    if (existing) {
      log(`‡∏Ñ‡∏∏‡∏ì‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå "${name}" ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!`);
      return;
    }
  
    activeSideQuests.push({
      name,
      step: 0
    });
  
    log(`üÜï ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà: ${name}`);
    updateQuestLog();
    playSideQuestStep(name);
}
  
function playSideQuestStep(name) {
    const quest = sideQuests[name];
    const questState = activeSideQuests.find(q => q.name === name);
    const step = quest[questState.step];

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    if (step.condition && eval(step.condition)) {
        if (step.textAlt) step.text = step.textAlt;
    }
  
    scene.innerHTML = step.emoji;
    statusBox.innerHTML = `<p>${step.text}</p>`;
    menu.innerHTML = "";
  
    updateQuestLog();
  
    if (step.choices) {
      step.choices.forEach(choice => {
        const btn = document.createElement("button");
        btn.className = "button";
        btn.textContent = choice.text;
        btn.onclick = () => {
          if (choice.effect === "next") {
            questState.step++;
            playSideQuestStep(name);
          } else if (choice.effect === "exit") {
            log(`‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå "${name}"`);
            removeQuest(name);
            nextEvent();
          } else {
            handleEffect(choice.effect);
          }
        };
        menu.appendChild(btn);
      });
    } else {
      handleEffect(step.effect);
      questState.step++;
      if (questState.step < quest.length) {
        menu.innerHTML = `<button class="button" onclick="playSideQuestStep('${name}')">‚ñ∂ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏ï‡πà‡∏≠</button>`;
      } else {
        log(`‚úÖ ‡πÄ‡∏Ñ‡∏ß‡∏™‡∏ï‡πå "${name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
        removeQuest(name);
        menu.innerHTML = `<button class="button" onclick="nextEvent()">‚ñ∂ ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ï‡πà‡∏≠</button>`;
      }
    }
  }

function restart() {
    player.hp = player.maxHp;
    startBattle();
}

function log(text) {
    const p = document.createElement("p");
    p.textContent = text;
    p.classList.add("log-entry"); // for animation
    logBox.insertBefore(p, logBox.firstChild);
  
    if (logSound) {
        logSound.currentTime = 0;
        logSound.play().catch(() => {}); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô warning ‡∏à‡∏≤‡∏Å autoplay
      }
  
    // Limit to 10 lines
    while (logBox.childNodes.length > 10) {
      logBox.removeChild(logBox.lastChild);
    }
  
    logBox.scrollTop = 0;
  }
  

window.onload = async () => {
    await loadData();
    showIntro();
  };
  
function showIntro() {
    scene.innerHTML = `üåÑ`;
    statusBox.innerHTML = `
    <p>‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á ‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏°‡∏π‡πà‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡πá‡∏Å ‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≤‡πÉ‡∏ô‡πÇ‡∏•‡∏Å‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏ç‡πà...</p>
    <p>‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏≤‡∏à‡∏Ñ‡∏≤‡∏î‡πÄ‡∏î‡∏≤</p>
    `;
    menu.innerHTML = `<button class="button" onclick="startJourney()">‚ñ∂ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á</button>`;
}
  
function startJourney() {
    player.hp = player.maxHp;
    nextEvent(); // ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏π‡πà‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏£‡∏Å
}
  
